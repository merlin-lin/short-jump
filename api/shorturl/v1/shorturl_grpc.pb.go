// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/shorturl/v1/shorturl.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Shorturl_CreateShorturl_FullMethodName = "/api.shorturl.v1.Shorturl/CreateShorturl"
	Shorturl_UpdateShorturl_FullMethodName = "/api.shorturl.v1.Shorturl/UpdateShorturl"
	Shorturl_DeleteShorturl_FullMethodName = "/api.shorturl.v1.Shorturl/DeleteShorturl"
	Shorturl_GetShorturl_FullMethodName    = "/api.shorturl.v1.Shorturl/GetShorturl"
	Shorturl_ListShorturl_FullMethodName   = "/api.shorturl.v1.Shorturl/ListShorturl"
	Shorturl_Hello_FullMethodName          = "/api.shorturl.v1.Shorturl/Hello"
)

// ShorturlClient is the client API for Shorturl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShorturlClient interface {
	CreateShorturl(ctx context.Context, in *CreateShorturlRequest, opts ...grpc.CallOption) (*CreateShorturlReply, error)
	UpdateShorturl(ctx context.Context, in *UpdateShorturlRequest, opts ...grpc.CallOption) (*UpdateShorturlReply, error)
	DeleteShorturl(ctx context.Context, in *DeleteShorturlRequest, opts ...grpc.CallOption) (*DeleteShorturlReply, error)
	GetShorturl(ctx context.Context, in *GetShorturlRequest, opts ...grpc.CallOption) (*GetShorturlReply, error)
	ListShorturl(ctx context.Context, in *ListShorturlRequest, opts ...grpc.CallOption) (*ListShorturlReply, error)
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
}

type shorturlClient struct {
	cc grpc.ClientConnInterface
}

func NewShorturlClient(cc grpc.ClientConnInterface) ShorturlClient {
	return &shorturlClient{cc}
}

func (c *shorturlClient) CreateShorturl(ctx context.Context, in *CreateShorturlRequest, opts ...grpc.CallOption) (*CreateShorturlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShorturlReply)
	err := c.cc.Invoke(ctx, Shorturl_CreateShorturl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorturlClient) UpdateShorturl(ctx context.Context, in *UpdateShorturlRequest, opts ...grpc.CallOption) (*UpdateShorturlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShorturlReply)
	err := c.cc.Invoke(ctx, Shorturl_UpdateShorturl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorturlClient) DeleteShorturl(ctx context.Context, in *DeleteShorturlRequest, opts ...grpc.CallOption) (*DeleteShorturlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShorturlReply)
	err := c.cc.Invoke(ctx, Shorturl_DeleteShorturl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorturlClient) GetShorturl(ctx context.Context, in *GetShorturlRequest, opts ...grpc.CallOption) (*GetShorturlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShorturlReply)
	err := c.cc.Invoke(ctx, Shorturl_GetShorturl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorturlClient) ListShorturl(ctx context.Context, in *ListShorturlRequest, opts ...grpc.CallOption) (*ListShorturlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShorturlReply)
	err := c.cc.Invoke(ctx, Shorturl_ListShorturl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorturlClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, Shorturl_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShorturlServer is the server API for Shorturl service.
// All implementations must embed UnimplementedShorturlServer
// for forward compatibility.
type ShorturlServer interface {
	CreateShorturl(context.Context, *CreateShorturlRequest) (*CreateShorturlReply, error)
	UpdateShorturl(context.Context, *UpdateShorturlRequest) (*UpdateShorturlReply, error)
	DeleteShorturl(context.Context, *DeleteShorturlRequest) (*DeleteShorturlReply, error)
	GetShorturl(context.Context, *GetShorturlRequest) (*GetShorturlReply, error)
	ListShorturl(context.Context, *ListShorturlRequest) (*ListShorturlReply, error)
	Hello(context.Context, *HelloReq) (*HelloResp, error)
	mustEmbedUnimplementedShorturlServer()
}

// UnimplementedShorturlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShorturlServer struct{}

func (UnimplementedShorturlServer) CreateShorturl(context.Context, *CreateShorturlRequest) (*CreateShorturlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShorturl not implemented")
}
func (UnimplementedShorturlServer) UpdateShorturl(context.Context, *UpdateShorturlRequest) (*UpdateShorturlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShorturl not implemented")
}
func (UnimplementedShorturlServer) DeleteShorturl(context.Context, *DeleteShorturlRequest) (*DeleteShorturlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShorturl not implemented")
}
func (UnimplementedShorturlServer) GetShorturl(context.Context, *GetShorturlRequest) (*GetShorturlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShorturl not implemented")
}
func (UnimplementedShorturlServer) ListShorturl(context.Context, *ListShorturlRequest) (*ListShorturlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShorturl not implemented")
}
func (UnimplementedShorturlServer) Hello(context.Context, *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedShorturlServer) mustEmbedUnimplementedShorturlServer() {}
func (UnimplementedShorturlServer) testEmbeddedByValue()                  {}

// UnsafeShorturlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShorturlServer will
// result in compilation errors.
type UnsafeShorturlServer interface {
	mustEmbedUnimplementedShorturlServer()
}

func RegisterShorturlServer(s grpc.ServiceRegistrar, srv ShorturlServer) {
	// If the following call pancis, it indicates UnimplementedShorturlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Shorturl_ServiceDesc, srv)
}

func _Shorturl_CreateShorturl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShorturlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).CreateShorturl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorturl_CreateShorturl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).CreateShorturl(ctx, req.(*CreateShorturlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorturl_UpdateShorturl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShorturlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).UpdateShorturl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorturl_UpdateShorturl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).UpdateShorturl(ctx, req.(*UpdateShorturlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorturl_DeleteShorturl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShorturlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).DeleteShorturl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorturl_DeleteShorturl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).DeleteShorturl(ctx, req.(*DeleteShorturlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorturl_GetShorturl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShorturlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).GetShorturl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorturl_GetShorturl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).GetShorturl(ctx, req.(*GetShorturlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorturl_ListShorturl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShorturlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).ListShorturl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorturl_ListShorturl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).ListShorturl(ctx, req.(*ListShorturlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorturl_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorturl_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Shorturl_ServiceDesc is the grpc.ServiceDesc for Shorturl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shorturl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shorturl.v1.Shorturl",
	HandlerType: (*ShorturlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShorturl",
			Handler:    _Shorturl_CreateShorturl_Handler,
		},
		{
			MethodName: "UpdateShorturl",
			Handler:    _Shorturl_UpdateShorturl_Handler,
		},
		{
			MethodName: "DeleteShorturl",
			Handler:    _Shorturl_DeleteShorturl_Handler,
		},
		{
			MethodName: "GetShorturl",
			Handler:    _Shorturl_GetShorturl_Handler,
		},
		{
			MethodName: "ListShorturl",
			Handler:    _Shorturl_ListShorturl_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _Shorturl_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/shorturl/v1/shorturl.proto",
}
